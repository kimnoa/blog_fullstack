{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst usePagination = countPerPage => {\n  _s();\n  // state: 전체 객체 리스트 상태 (호출하는 위치에서 state 결정 - 댓글, 게시물 등등)\n  const [totalList, setTotalList] = useState([]);\n  // state: 보여줄 객체 리스트 상태\n  const [viewList, setViewList] = useState([]);\n  // state: 현재 페이지 번호 상태\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // state: 전체 페이지 번호 리스트 상태\n  const [totalPageList, setTotalPageList] = useState([1]);\n  // state: 보여줄 페이지 번호 리스트 상태\n  const [viewPageList, setViewPageList] = useState([1]);\n  // state: 현재 섹션 상태\n  const [currentSection, setCurrentSection] = useState(1);\n\n  // state: 전체 섹션 상태\n  const [totalSection, setTotalSection] = useState(1);\n\n  // function: 보여줄 객체 리스트 추출 함수\n  const setView = () => {\n    const start_index = (currentPage - 1) * countPerPage;\n    const end_index = start_index + countPerPage > totalList.length ? totalList.length : start_index + countPerPage;\n    const viewList = totalList.slice(start_index, end_index);\n    setViewList(viewList);\n  };\n\n  // function: 보여줄 페이지 리스트 추출 함수\n  const setViewPage = () => {\n    const start_index = (currentSection - 1) * 10;\n    const end_index = currentSection + 10 > totalPageList.length ? totalPageList.length : currentSection + 10;\n    const viewPageList = totalPageList.slice(start_index, end_index);\n    setViewPageList(viewPageList);\n  };\n\n  // effect: total list가 변경될 때마다 진행 작업\n  useEffect(() => {\n    const totalPage = Math.ceil(totalList.length / countPerPage);\n    const totalPageList = [];\n    for (let page = 1; page <= totalPage; page++) {\n      totalPageList.push(page);\n    }\n    setTotalPageList(totalPageList);\n    const totalSection = Math.ceil(totalPage / (10 * 5));\n    setTotalSection(totalSection);\n    setCurrentPage(1);\n    setCurrentSection(1);\n    setView();\n    setViewPage();\n  }, [totalList]);\n\n  // effect: currentPage가 변경될 때마다 진행 작업\n  useEffect(setView, [currentPage]);\n  // effect: currentSection이 변경될 때마다 진행 작업\n  useEffect(setViewPage, [currentSection]);\n  return {\n    viewList,\n    currentPage,\n    setCurrentPage,\n    viewPageList,\n    currentSection,\n    setCurrentSection,\n    totalSection,\n    setTotalList\n  };\n};\n_s(usePagination, \"vRhjQKn/Xgvgz/0iOD7/zzGFpZY=\");\nexport default usePagination;","map":{"version":3,"names":["useEffect","useState","usePagination","countPerPage","_s","totalList","setTotalList","viewList","setViewList","currentPage","setCurrentPage","totalPageList","setTotalPageList","viewPageList","setViewPageList","currentSection","setCurrentSection","totalSection","setTotalSection","setView","start_index","end_index","length","slice","setViewPage","totalPage","Math","ceil","page","push"],"sources":["/Users/noa/Documents/java/front/src/hooks/pagination.hook.ts"],"sourcesContent":["import {useEffect, useState} from \"react\";\n\nconst usePagination = <T>(countPerPage: number) => {\n    // state: 전체 객체 리스트 상태 (호출하는 위치에서 state 결정 - 댓글, 게시물 등등)\n    const [totalList, setTotalList] = useState<T[]>([]);\n    // state: 보여줄 객체 리스트 상태\n    const [viewList, setViewList] = useState<T[]>([]);\n    // state: 현재 페이지 번호 상태\n    const [currentPage, setCurrentPage] = useState<number>(1);\n\n    // state: 전체 페이지 번호 리스트 상태\n    const [totalPageList, setTotalPageList] = useState<number[]>([1]);\n    // state: 보여줄 페이지 번호 리스트 상태\n    const [viewPageList, setViewPageList] = useState<number[]>([1]);\n    // state: 현재 섹션 상태\n    const [currentSection, setCurrentSection] = useState<number>(1);\n\n    // state: 전체 섹션 상태\n    const [totalSection, setTotalSection] = useState<number>(1);\n\n    // function: 보여줄 객체 리스트 추출 함수\n    const setView = () => {\n        const start_index = (currentPage - 1) * countPerPage;\n        const end_index = start_index + countPerPage > totalList.length ? totalList.length : start_index + countPerPage;\n        const viewList = totalList.slice(start_index,end_index);\n        setViewList(viewList);\n    };\n\n    // function: 보여줄 페이지 리스트 추출 함수\n    const setViewPage = () => {\n        const start_index = (currentSection - 1) * 10;\n        const end_index = currentSection + 10 > totalPageList.length ? totalPageList.length : currentSection + 10;\n        const viewPageList = totalPageList.slice(start_index,end_index);\n        setViewPageList(viewPageList);\n    };\n\n    // effect: total list가 변경될 때마다 진행 작업\n    useEffect(() => {\n\n        const totalPage = Math.ceil(totalList.length / countPerPage);\n        const totalPageList: number[] = [];\n        for (let page = 1; page <= totalPage; page++) {\n            totalPageList.push(page);\n        }\n        setTotalPageList(totalPageList);\n\n        const totalSection = Math.ceil(totalPage / (10 * 5));\n        setTotalSection(totalSection);\n\n        setCurrentPage(1);\n        setCurrentSection(1);\n\n        setView();\n        setViewPage();\n\n    }, [totalList]);\n\n    // effect: currentPage가 변경될 때마다 진행 작업\n    useEffect(setView,[currentPage]);\n    // effect: currentSection이 변경될 때마다 진행 작업\n    useEffect(setViewPage,[currentSection]);\n\n\n    return {\n        viewList,\n        currentPage,\n        setCurrentPage,\n        viewPageList,\n        currentSection,\n        setCurrentSection,\n        totalSection,\n        setTotalList,\n    };\n};\n\nexport default usePagination;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}