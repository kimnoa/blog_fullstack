{"ast":null,"code":"export const convertUrlToFile = async urls => {\n  const response = await fetch(urls);\n  const data = await response.blob();\n  const extend = urls.split('.').pop();\n  const fileName = urls.split('/').pop();\n  const meta = {\n    type: `image/${extend}`\n  };\n  return new File([data], fileName, meta);\n};\nexport const convertUrlsToFile = async urls => {\n  const fileList = [];\n  for (const url of urls) {\n    const file = await convertUrlToFile(url);\n    fileList.push(file);\n  }\n  return fileList;\n};","map":{"version":3,"names":["convertUrlToFile","urls","response","fetch","data","blob","extend","split","pop","fileName","meta","type","File","convertUrlsToFile","fileList","url","file","push"],"sources":["/Users/noa/Documents/java/front/src/utils/convertUrlsToFile.ts"],"sourcesContent":["export const convertUrlToFile = async (urls: string) => {\n    const response = await fetch(urls);\n    const data = await response.blob();\n    const extend = urls.split('.').pop();\n    const fileName = urls.split('/').pop();\n    const meta = { type: `image/${extend}` };\n\n    return new File([data], fileName as string, meta);\n};\n\nexport const convertUrlsToFile = async (urls: string[]) => {\n    const fileList: File[] = [];\n    for (const url of urls) {\n        const file = await convertUrlToFile(url);\n        fileList.push(file);\n    }\n    return fileList;\n}"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG,MAAOC,IAAY,IAAK;EACpD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,IAAI,CAAC;EAClC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,MAAMC,MAAM,GAAGL,IAAI,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;EACpC,MAAMC,QAAQ,GAAGR,IAAI,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;EACtC,MAAME,IAAI,GAAG;IAAEC,IAAI,EAAE,SAASL,MAAM;EAAG,CAAC;EAExC,OAAO,IAAIM,IAAI,CAAC,CAACR,IAAI,CAAC,EAAEK,QAAQ,EAAYC,IAAI,CAAC;AACrD,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAG,MAAOZ,IAAc,IAAK;EACvD,MAAMa,QAAgB,GAAG,EAAE;EAC3B,KAAK,MAAMC,GAAG,IAAId,IAAI,EAAE;IACpB,MAAMe,IAAI,GAAG,MAAMhB,gBAAgB,CAACe,GAAG,CAAC;IACxCD,QAAQ,CAACG,IAAI,CAACD,IAAI,CAAC;EACvB;EACA,OAAOF,QAAQ;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}